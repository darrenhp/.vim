

autocmd! BufNewFile * silent! 0r ~/.vim/templates/template.%:e
"========================函数==========================“
function! MySys()
  if has("win32")
    return "windows"
  else
    return "linux"
  endif
endfunction

function! SwitchToBuf(filename)
    "let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
    " find in current tab
    let bufwinnr = bufwinnr(a:filename)
    if bufwinnr != -1
        exec bufwinnr . "wincmd w"
        return
    else
        " find in each tab
        tabfirst
        let tab = 1
        while tab <= tabpagenr("$")
            let bufwinnr = bufwinnr(a:filename)
            if bufwinnr != -1
                exec "normal " . tab . "gt"
                exec bufwinnr . "wincmd w"
                return
            endif
            tabnext
            let tab = tab + 1
        endwhile
        " not exist, new tab
        exec "tabnew " . a:filename
    endif
endfunction

"===========================END函数=======================：=“

let mapleader = ","

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                      为方便编辑vimrc设置部分                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"设置快速编辑.vimrc文件 ,e 编辑.vimrc
nmap <leader>vv :tabedit $MYVIMRC<CR> 
nmap <leader>dd :tabedit $HOME/.vim/darrenhp_vimrc<CR> 
"
"保存.vimrc文件后会自动调用新的.vimrc
autocmd bufwritepost .vimrc source $MYVIMRC 
autocmd bufwritepost darrenhp_vimrc source $MYVIMRC

"==============================================================================="
"==============================================================================="
syntax on                      "语法支持
set autoindent   " 自动缩进
set backspace=2  " 在insert模式下用退格键删除
set showmatch    " 代码匹配
set laststatus=2 " 总是显示状态行
set expandtab    " 以下三个配置配合使用，设置tab和缩进空格数
set shiftwidth=2
set tabstop=2
set cursorline              "为光标所在行加下划线
set number                  "显示行号
set autoread                "文件在Vim之外修改过，自动重新读入
set smarttab

set noignorecase              "检索时不忽略大小写
set fileencodings=uft-8,gbk "使用utf-8或gbk打开文件
set hlsearch                     "检索时高亮显示匹配项
set helplang=cn             "帮助系统设置为中文
"set foldmethod=syntax       "代码折叠
"}}

"conf for tabs, 为标签页进行的配置，通过ctrl h/l切换标签等
nnoremap <C-l> gt
nnoremap <C-h> gT
"nnoremap <leader>t : tabe<CR>

"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
"set guifont=PowerlineSymbols\ for\ Powerline
set nocompatible
set t_Co=256
"let g:Powerline_symbols = 'fancy'

"let g:EasyMotion_leader_key = '<Leader>'


"==============================================================================="
"==============================================================================="
"========Solarized====="

"set background=dark
"colorscheme default
colorscheme obsidian
"colorscheme solarized
"call togglebg#map("<F5>")
"========Solarized====="



"=========From Watashi =======
"set fileencodings=utf-8,ucs-bom,gb18030,shift-jis,big5,euc-jp,euc-kr
"set fileformats=unix
"set fileformat=unix
"set number autoindent tabstop=4 shiftwidth=4 expandtab smarttab
" set ruler ttyfast

autocmd FileType c,cpp set cindent cinoptions=:0g0t0(sus

if has("gui_running")
"  set lines=40 columns=111
set lines=32 columns=100
"colo desert
"  set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
set guioptions-=T
set nomousehide
endif

highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/


autocmd FileType py,python set tabstop=4
autocmd FileType py,python set shiftwidth=4

"map <F5> :call CompileAndRun()<CR>
"map <F2> <esc>:!cpplint %<cr>
"nmap <F9> :SCCompile<cr>
"nmap <F10> :SCCompileRun<cr>
"map <F11> :!ruby ~/toolkit/usta/judge/submit.rb % <CR>
"map <F12> :!~/toolkit/sb.py % <CR>

" Open and close all the three plugins on the same time 
"nmap <F8>   :TrinityToggleAll<CR> 






" " Open and close the srcexpl.vim separately 
nmap <F9>   :TrinityToggleSourceExplorer<CR> 

" " Open and close the taglist.vim separately 
nmap <F10>  :TrinityToggleTagList<CR> 

" " Open and close the NERD_tree.vim separately 
nmap <F11>  :TrinityToggleNERDTree<CR> 

" // The switch of the Source Explorer 
nmap <F8> :SrcExplToggle<CR> 

" // Set the height of Source Explorer window 
let g:SrcExpl_winHeight = 8 

" // Set 100 ms for refreshing the Source Explorer 
let g:SrcExpl_refreshTime = 100 

" // Set "Enter" key to jump into the exact definition context 
let g:SrcExpl_jumpKey = "<ENTER>" 

" // Set "Space" key for back from the definition context 
let g:SrcExpl_gobackKey = "<SPACE>" 

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
let g:SrcExpl_pluginList = [ 
        \ "__Tag_List__", 
        \ "_NERD_tree_" 
    \ ] 

" // Enable/Disable the local definition searching, and note that this is not 
" // guaranteed to work, the Source Explorer doesn't check the syntax for now. 
" // It only searches for a match with the keyword according to command 'gd' 
let g:SrcExpl_searchLocalDef = 1 

" // Do not let the Source Explorer update the tags file when opening 
let g:SrcExpl_isUpdateTags = 0 

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to 
" // create/update the tags file 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 

" // Set "<F12>" key for updating the tags file artificially 
let g:SrcExpl_updateTagsKey = "<F12>" 

" // Set "<F3>" key for displaying the previous definition in the jump list 
let g:SrcExpl_prevDefKey = "<F3>" 

" // Set "<F4>" key for displaying the next definition in the jump list 
let g:SrcExpl_nextDefKey = "<F4>" 

set fileencoding=utf-8
